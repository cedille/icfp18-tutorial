module TalkCode.
import Deps.


---------- Interactive Commands ----------

-- "C-i n" - Print the selected node's normalization; if nothing is selected, prompt instead
-- "C-i h" - Same as "C-i n", but only head-normalizes
-- "C-i e" - Same as "C-i n", but only erases

normalize-me ◂ Nat ➔ Nat =
  mlt (suc (suc (suc zero))).

erase-me ◂ ∀ X : ★. Π x : X. ∀ n : Nat. {x ≃ n} ➾ Nat =
  Λ X. λ x. Λ n. Λ e. add (φ ς e - n {x}) (suc (suc zero)).





































{-
   Index of Addition Theorems
     add-zero1 : Π n     : Nat. { add zero n      ≃ n               }
     add-zero2 : Π n     : Nat. { add n zero      ≃ n               }
     add-suc1  : Π m n   : Nat. { add (suc m) n   ≃ suc (add m n)   }
     add-suc2  : Π m n   : Nat. { add m (suc n)   ≃ suc (add m n)   }
     add-comm  : Π m n   : Nat. { add m n         ≃ add n m         }
     add-assoc : Π m n o : Nat. { add m (add n o) ≃ add (add m n) o }
-}
beta-reduction-example ◂
  
    Π m : Nat. Π n : Nat. Π o : Nat.
      { add m (add n o) ≃ add n (add m o) } =
  
  λ m. λ n. λ o. β.
-- Navigate to β, then type "C-i t" to open the beta-reduction buffer with the
-- expected type. You can navigate in the beta-reduction buffer just like in
-- cedille-mode. With a node selected, you can perform the following commands:
-- "C-i n" - Normalize the node
-- "C-i h" - Head-normalize the node
-- "C-i =" - Input an expression to replace the node if it is convertible
-- "C-i r" - Input a TERM, and rewrite the node using the term's synthesized type (must synthesize an equation)
-- "C-i R" - Same as "C-i r", but normalizes as it looks for matches (same as ρ+)
-- "C-i ," - Undo
-- "C-i ." - Redo

-- Once both sides of the equation are equal, type "C-i p" to reconstruct the proof.














































---------- Elaboration to Cedille Core ----------


-- Example A: λ-abstractions always need to be annotated
example-A ◂ ∀ X : ★. X ➔ X = Λ X. λ x. x.

-- Example B: Inferred type arguments need to be inserted
example-B ◂ Nat = id zero.

-- Example C: ι-pairs need to provide the dependent type of the second projection
example-C ◂ Nat = [zero', zeroi].

-- Example D: β needs to provide an untyped term t so it can prove { t ≃ t }, and another for erasure
example-D ◂ ∀ T : ★. Π t : T. {t ≃ t} = Λ T. λ t. β.

-- Example E: δ-contradictions need to be converted to { tt ≃ ff } / { λ t. λ f. t ≃ λ t. λ f. f }
example-E ◂ Π n : Nat. { suc n ≃ zero } ➔ ∀ X : ★. X = λ n. λ e. Λ X. δ - e.

-- Example F: ρ-terms need to specify where exactly the rewrites occur
example-F ◂ Π w : Nat. {zero ≃ w} ➔ Matrix w w ➔ Matrix w zero = λ w. λ e. λ mx. ρ e - mx.


---------- Type-Preserving Rewrites ----------


tpr-problem-A ◂
    ∀ A : ★. ∀ a : A. {a ≃ λ x. x} ➾
       ∀ B : A ➔ ★. B a ➔ B a
  = Λ A. Λ a. Λ e. Λ B. ρ e - λ b. b.

tpr-problem-B ◂
    ∀ A : ★. ∀ a : A. ∀ a' : A. ∀ e : {a ≃ a'}. {a ≃ λ x. x} ➾
      ∀ B : Π a : A. Π a' : A. {a ≃ a'} ➔ ★. B a a' e ➔ B a a' e
  = Λ A. Λ a. Λ a'. Λ e. Λ e'. Λ B. ρ e' - λ b. b.

